#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'

# Script to regenerate the cards shown in the README
# This script generates both the MTG Card Maker card and Joe Sharp card

# Generates and converts README cards to SVG and WebP formats
class ReadmeCardGenerator
  def initialize
    @output_dir = 'images'
    @docs_dir = 'docs/images'
    FileUtils.mkdir_p('tmp')
    FileUtils.mkdir_p(@output_dir)
  end

  def generate_all_cards
    puts 'ü™Ñ Regenerating README cards...'

    cards.each do |card|
      generate_card(card)
      convert_card_to_webp(card)
      copy_to_docs(card)
      cleanup_card_png(card)
      display_card_results(card)
    end
  end

  private

  def cards
    [
      {
        name: 'MTG Card Maker',
        mana_cost: 'RRRRR',
        type_line: 'Ruby - SVG - Shell',
        rules_text: '‚§µÔ∏é: Create a custom MTG card.',
        flavor_text: 'Raw, untamed power and fiery creation, a testament to the passionate and dynamic nature of Ruby.',
        power: 7,
        toughness: 12,
        border_color: 'silver',
        color: 'red',
        art: 'mtgcm.webp',
        output_svg: File.join(@output_dir, 'mtgcm_card.svg'),
        output_webp: File.join(@output_dir, 'mtgcm_card.webp'),
        output_png: File.join(@output_dir, 'mtgcm_card.png')
      },
      {
        name: 'Joe Sharp',
        mana_cost: '2UR',
        type_line: 'Engineer - Fullstack',
        rules_text: 'When Joe Sharp enters the battlefield, ' \
                    'create a 1/1 Code token with \"This token can debug any program.\"\n\n' \
                    'Whenever you cast a Red spell, draw a card.',
        flavor_text: '\"I write code everyday.\" - Joe Sharp',
        power: 3,
        toughness: 3,
        border_color: 'gold',
        color: 'blue',
        art: 'joe.webp',
        output_svg: File.join(@output_dir, 'joe-sharp_card.svg'),
        output_webp: File.join(@output_dir, 'joe-sharp_card.webp'),
        output_png: File.join(@output_dir, 'joe-sharp_card.png')
      }
    ]
  end

  def generate_card(card)
    puts "Generating #{card[:name]} card..."

    command = build_generate_command(card)
    system(command)
  end

  def build_generate_command(card)
    [
      'bin/mtg_card_maker generate_card',
      "--name=\"#{card[:name]}\"",
      "--mana-cost=#{card[:mana_cost]}",
      "--type-line=\"#{card[:type_line]}\"",
      "--rules-text=\"#{card[:rules_text]}\"",
      "--flavor-text=\"#{card[:flavor_text]}\"",
      "--power=#{card[:power]}",
      "--toughness=#{card[:toughness]}",
      "--border-color=#{card[:border_color]}",
      "--color=#{card[:color]}",
      "--output=#{card[:output_svg]}",
      "--art=#{card[:art]}"
    ].join(' ')
  end

  def convert_card_to_webp(card)
    puts "Converting #{card[:name]} SVG to temporary PNG..."
    system("rsvg-convert --zoom=2 #{card[:output_svg]} -o #{card[:output_png]}")

    puts "Converting #{card[:name]} PNG to WebP..."
    system("cwebp #{card[:output_png]} -o #{card[:output_webp]}")
  end

  def copy_to_docs(card)
    puts "Copying #{card[:name]} WebP to docs..."
    FileUtils.cp(card[:output_webp], 'docs/images/')
  end

  def cleanup_card_png(card)
    puts "Removing #{card[:name]} temporary PNG file..."
    FileUtils.rm_f(card[:output_png])
  end

  def display_card_results(card)
    puts "‚ú® #{card[:name]} card completed!"
    puts 'üìÅ Generated files:'
    puts "  - #{card[:output_svg]}"
    puts "  - #{card[:output_webp]}"
    puts "  - #{card[:output_webp].sub(@output_dir, @docs_dir)}\n\n"
  end
end

# Run the generator
ReadmeCardGenerator.new.generate_all_cards
